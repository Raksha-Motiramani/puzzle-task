{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus\\\\client\\\\src\\\\components\\\\Gameboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [tiles, setTiles] = useState([{\n    id: 1,\n    color: \"red\"\n  }, {\n    id: 2,\n    color: \"blue\"\n  }, {\n    id: 3,\n    color: \"green\"\n  }, {\n    id: 4,\n    color: \"olive\"\n  }, {\n    id: 5,\n    color: \"red\"\n  }, {\n    id: 6,\n    color: \"yellow\"\n  }, {\n    id: 7,\n    color: \"pink\"\n  }, {\n    id: 8,\n    color: \"pink\"\n  }, {\n    id: 9,\n    color: \"green\"\n  }, {\n    id: 10,\n    color: \"blue\"\n  }, {\n    id: 11,\n    color: \"olive\"\n  }, {\n    id: 12,\n    color: \"yellow\"\n  }]);\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [id1, id2] = selectedTileIds;\n      if (id1 && id2) {\n        const tile1 = tiles.find(tile => tile.id === id1);\n        const tile2 = tiles.find(tile => tile.id === id2);\n        if (tile1.color === tile2.color) {\n          setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, id1, id2]);\n        }\n        setSelectedTileIds([]);\n      }\n    };\n    checkForMatch();\n  }, [selectedTileIds, tiles]);\n  const handleTileClick = id => {\n    if (matchedTileIds.includes(id)) {\n      return;\n    }\n    if (selectedTileIds.length === 2) {\n      return;\n    }\n    setSelectedTileIds(prevSelectedTileIds => [...prevSelectedTileIds, id]);\n  };\n  const handleRestartClick = () => {\n    setTiles(prevTiles => prevTiles.map(tile => ({\n      ...tile,\n      matched: false\n    })));\n    setSelectedTileIds([]);\n    setMatchedTileIds([]);\n  };\n  return (\n    /*#__PURE__*/\n    // <div className=\"grid-container\">\n    //   <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n    //     {tiles.map(({ id, color }) => (\n    //       <Tile\n    //         key={id}\n    //         id={id}\n    //         color={color}\n    //         matched={matchedTileIds.includes(id)}\n    //         selected={selectedTileIds.includes(id)}\n    //         onClick={() => handleTileClick(id)}\n    //       />\n    //     ))}\n    //   </div>\n    //   <div>\n    //   <button className=\"restart-button\" onClick={handleRestartClick}>Restart</button>\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        },\n        children: tiles.map(_ref => {\n          let {\n            id,\n            color\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Tile, {\n            id: id,\n            color: color,\n            matched: matchedTileIds.includes(id),\n            selected: selectedTileIds.includes(id),\n            onClick: () => handleTileClick(id)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          marginTop: \"16px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"restart-button\",\n          onClick: handleRestartClick,\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(GameBoard, \"m3mUPlHCFK2z8O+YGKtlR/+a31s=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Tile","jsxDEV","_jsxDEV","GameBoard","_s","tiles","setTiles","id","color","selectedTileIds","setSelectedTileIds","matchedTileIds","setMatchedTileIds","checkForMatch","id1","id2","tile1","find","tile","tile2","prevMatchedTileIds","handleTileClick","includes","length","prevSelectedTileIds","handleRestartClick","prevTiles","map","matched","className","children","style","display","flexWrap","_ref","selected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","justifyContent","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus/client/src/components/Gameboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nconst GameBoard = () => {\r\n  const [tiles, setTiles] = useState([\r\n    { id: 1, color: \"red\" },\r\n    { id: 2, color: \"blue\" },\r\n    { id: 3, color: \"green\" },\r\n    { id: 4, color: \"olive\" },\r\n    { id: 5, color: \"red\" },\r\n    { id: 6, color: \"yellow\" },\r\n    { id: 7, color: \"pink\" },\r\n    { id: 8, color: \"pink\" },\r\n    { id: 9, color: \"green\" },\r\n    { id: 10, color: \"blue\" },\r\n    { id: 11, color: \"olive\" },\r\n    { id: 12, color: \"yellow\" },\r\n  ]);\r\n\r\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const checkForMatch = () => {\r\n      const [id1, id2] = selectedTileIds;\r\n      if (id1 && id2) {\r\n        const tile1 = tiles.find((tile) => tile.id === id1);\r\n        const tile2 = tiles.find((tile) => tile.id === id2);\r\n        if (tile1.color === tile2.color) {\r\n          setMatchedTileIds((prevMatchedTileIds) => [\r\n            ...prevMatchedTileIds,\r\n            id1,\r\n            id2,\r\n          ]);\r\n        }\r\n        setSelectedTileIds([]);\r\n      }\r\n    };\r\n    checkForMatch();\r\n  }, [selectedTileIds, tiles]);\r\n\r\n  const handleTileClick = (id) => {\r\n    if (matchedTileIds.includes(id)) {\r\n      return;\r\n    }\r\n\r\n    if (selectedTileIds.length === 2) {\r\n      return;\r\n    }\r\n\r\n    setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n  };\r\n\r\n  const handleRestartClick = () => {\r\n    setTiles((prevTiles) =>\r\n      prevTiles.map((tile) => ({ ...tile, matched: false }))\r\n    );\r\n    setSelectedTileIds([]);\r\n    setMatchedTileIds([]);\r\n  };\r\n\r\n  return (\r\n    // <div className=\"grid-container\">\r\n    //   <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n    //     {tiles.map(({ id, color }) => (\r\n    //       <Tile\r\n    //         key={id}\r\n    //         id={id}\r\n    //         color={color}\r\n    //         matched={matchedTileIds.includes(id)}\r\n    //         selected={selectedTileIds.includes(id)}\r\n    //         onClick={() => handleTileClick(id)}\r\n    //       />\r\n    //     ))}\r\n    //   </div>\r\n    //   <div>\r\n    //   <button className=\"restart-button\" onClick={handleRestartClick}>Restart</button>\r\n    //   </div>\r\n    // </div>\r\n    <div className=\"grid-container\">\r\n  <div\r\n    className=\"game-board\"\r\n    style={{ display: \"flex\", flexWrap: \"wrap\" }}\r\n  >\r\n    {tiles.map(({ id, color }) => (\r\n      <Tile\r\n        key={id}\r\n        id={id}\r\n        color={color}\r\n        matched={matchedTileIds.includes(id)}\r\n        selected={selectedTileIds.includes(id)}\r\n        onClick={() => handleTileClick(id)}\r\n      />\r\n    ))}\r\n  </div>\r\n  <div\r\n    style={{\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      marginTop: \"16px\",\r\n    }}\r\n  >\r\n    <button className=\"restart-button\" onClick={handleRestartClick}>\r\n      Restart\r\n    </button>\r\n  </div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
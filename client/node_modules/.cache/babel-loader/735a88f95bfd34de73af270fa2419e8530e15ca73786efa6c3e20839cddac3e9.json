{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus1\\\\client\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\nimport { useLocation } from \"react-router-dom\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const location = useLocation();\n  const {\n    username\n  } = location.state;\n  const navigate = useNavigate();\n  const shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const [tiles, setTiles] = useState(shuffle([{\n    id: 1,\n    color: \"red\"\n  }, {\n    id: 2,\n    color: \"blue\"\n  }, {\n    id: 3,\n    color: \"green\"\n  }, {\n    id: 4,\n    color: \"olive\"\n  }, {\n    id: 5,\n    color: \"red\"\n  }, {\n    id: 6,\n    color: \"yellow\"\n  }, {\n    id: 7,\n    color: \"pink\"\n  }, {\n    id: 8,\n    color: \"pink\"\n  }, {\n    id: 9,\n    color: \"green\"\n  }, {\n    id: 10,\n    color: \"blue\"\n  }, {\n    id: 11,\n    color: \"olive\"\n  }, {\n    id: 12,\n    color: \"yellow\"\n  }]), console.log(tiles.length));\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [id1, id2] = selectedTileIds;\n      if (id1 && id2) {\n        const tile1 = tiles.find(tile => tile.id === id1);\n        const tile2 = tiles.find(tile => tile.id === id2);\n        if (tile1.color === tile2.color) {\n          setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, id1, id2]);\n          setScore(prevScore => prevScore + 10);\n        }\n        setSelectedTileIds([]);\n      }\n    };\n    checkForMatch();\n    if (tiles.length === 0) {\n      // Navigate to another component with the username and score data\n      console.log(\"game over\");\n      navigate(\"/gameover\");\n    }\n  }, [selectedTileIds, tiles, matchedTileIds, score, navigate, username]);\n  const handleTileClick = id => {\n    if (matchedTileIds.includes(id)) {\n      return;\n    }\n    if (selectedTileIds.includes(id)) {\n      setSelectedTileIds(prevSelectedTileIds => prevSelectedTileIds.filter(tileId => tileId !== id));\n      return;\n    }\n    if (selectedTileIds.length === 2) {\n      return;\n    }\n    setSelectedTileIds(prevSelectedTileIds => [...prevSelectedTileIds, id]);\n    if (selectedTileIds.length === 1) {\n      const [prevId] = selectedTileIds;\n      const prevTile = tiles.find(tile => tile.id === prevId);\n      const currentTile = tiles.find(tile => tile.id === id);\n      if (prevTile.color === currentTile.color) {\n        setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, prevId, id]);\n      } else {\n        setScore(prevScore => prevScore - 1);\n      }\n    }\n  };\n  const handleRestartClick = () => {\n    setTiles(prevTiles => prevTiles.map(tile => ({\n      ...tile,\n      matched: false\n    })));\n    setSelectedTileIds([]);\n    setMatchedTileIds([]);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"score-text\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: tiles.map(_ref => {\n        let {\n          id,\n          color\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: id,\n          color: color,\n          matched: matchedTileIds.includes(id),\n          selected: selectedTileIds.includes(id),\n          onClick: () => handleTileClick(id)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: \"16px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-button\",\n        onClick: handleRestartClick,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"gBNNbvBX4rR/LGGFdqaEIfIp9sY=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Tile","useLocation","useNavigate","jsxDEV","_jsxDEV","GameBoard","_s","location","username","state","navigate","shuffle","array","i","length","j","Math","floor","random","tiles","setTiles","id","color","console","log","selectedTileIds","setSelectedTileIds","matchedTileIds","setMatchedTileIds","score","setScore","checkForMatch","id1","id2","tile1","find","tile","tile2","prevMatchedTileIds","prevScore","handleTileClick","includes","prevSelectedTileIds","filter","tileId","prevId","prevTile","currentTile","handleRestartClick","prevTiles","map","matched","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","_ref","selected","onClick","alignItems","justifyContent","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus1/client/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst GameBoard = () => {\r\n  \r\n    const location = useLocation();\r\n    const { username } = location.state;\r\n\r\n    const navigate = useNavigate();\r\n\r\n  const shuffle = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const [tiles, setTiles] = useState(\r\n    shuffle([\r\n      { id: 1, color: \"red\" },\r\n      { id: 2, color: \"blue\" },\r\n      { id: 3, color: \"green\" },\r\n      { id: 4, color: \"olive\" },\r\n      { id: 5, color: \"red\" },\r\n      { id: 6, color: \"yellow\" },\r\n      { id: 7, color: \"pink\" },\r\n      { id: 8, color: \"pink\" },\r\n      { id: 9, color: \"green\" },\r\n      { id: 10, color: \"blue\" },\r\n      { id: 11, color: \"olive\" },\r\n      { id: 12, color: \"yellow\" },\r\n    ]),\r\n    console.log(tiles.length)\r\n  );\r\n\r\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const checkForMatch = () => {\r\n      const [id1, id2] = selectedTileIds;\r\n      if (id1 && id2) {\r\n        const tile1 = tiles.find((tile) => tile.id === id1);\r\n        const tile2 = tiles.find((tile) => tile.id === id2);\r\n        if (tile1.color === tile2.color) {\r\n          setMatchedTileIds((prevMatchedTileIds) => [\r\n            ...prevMatchedTileIds,\r\n            id1,\r\n            id2,\r\n          ]);\r\n          setScore((prevScore) => prevScore + 10);\r\n        }\r\n        setSelectedTileIds([]);\r\n      }\r\n    };\r\n    checkForMatch();\r\n    if (tiles.length === 0) {\r\n        // Navigate to another component with the username and score data\r\n        console.log(\"game over\");\r\n        navigate(\"/gameover\");\r\n    }\r\n  }, [selectedTileIds, tiles, matchedTileIds, score , navigate , username]);\r\n\r\n\r\nconst handleTileClick = (id) => {\r\n    if (matchedTileIds.includes(id)) {\r\n      return;\r\n    }\r\n  \r\n    if (selectedTileIds.includes(id)) {\r\n      setSelectedTileIds((prevSelectedTileIds) => prevSelectedTileIds.filter((tileId) => tileId !== id));\r\n      return;\r\n    }\r\n  \r\n    if (selectedTileIds.length === 2) {\r\n      return;\r\n    }\r\n  \r\n    setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n  \r\n    if (selectedTileIds.length === 1) {\r\n      const [prevId] = selectedTileIds;\r\n      const prevTile = tiles.find((tile) => tile.id === prevId);\r\n      const currentTile = tiles.find((tile) => tile.id === id);\r\n  \r\n      if (prevTile.color === currentTile.color) {\r\n        setMatchedTileIds((prevMatchedTileIds) => [\r\n          ...prevMatchedTileIds,\r\n          prevId,\r\n          id,\r\n        ]);\r\n      } else {\r\n        setScore((prevScore) => prevScore - 1);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  const handleRestartClick = () => {\r\n    setTiles((prevTiles) =>\r\n      prevTiles.map((tile) => ({ ...tile, matched: false }))\r\n    );\r\n    setSelectedTileIds([]);\r\n    setMatchedTileIds([]);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className=\"score-container\">\r\n        <h1>{username}</h1>\r\n        <span className=\"score-text\">Score: {score}</span>\r\n      </div>\r\n      <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {tiles.map(({ id, color }) => (\r\n          <Tile\r\n            key={id}\r\n            id={id}\r\n            color={color}\r\n            matched={matchedTileIds.includes(id)}\r\n            selected={selectedTileIds.includes(id)}\r\n            onClick={() => handleTileClick(id)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginTop: \"16px\",\r\n        }}\r\n      >\r\n        <button className=\"restart-button\" onClick={handleRestartClick}>\r\n          Restart\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;        \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
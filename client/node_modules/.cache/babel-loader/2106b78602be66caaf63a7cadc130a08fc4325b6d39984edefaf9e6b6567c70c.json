{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus\\\\client\\\\src\\\\components\\\\Gameboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Tile from \"./Tile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [score, setScore] = useState(0);\n\n  // Initialize the board with random tiles\n  const initializeBoard = () => {\n    const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"];\n    const newBoard = [];\n    for (let i = 0; i < 16; i++) {\n      const randomIndex = Math.floor(Math.random() * colors.length);\n      newBoard.push({\n        id: i,\n        color: colors[randomIndex],\n        matched: false,\n        selected: false\n      });\n    }\n    setBoard(newBoard);\n  };\n\n  // Handle tile clicks\n  const handleTileClick = id => {\n    // If the tile is already matched or selected, do nothing\n    const tile = board.find(t => t.id === id);\n    if (tile.matched || tile.selected) {\n      return;\n    }\n\n    // Add the tile to the selected list\n    const newSelected = [...selected, id];\n    setSelected(newSelected);\n\n    // If two tiles are selected, check for a match\n    if (newSelected.length === 2) {\n      const tile1 = board.find(t => t.id === newSelected[0]);\n      const tile2 = board.find(t => t.id === newSelected[1]);\n      if (tile1.color === tile2.color) {\n        // If the tiles match, mark them as matched and clear the selected list\n        const newBoard = board.map(t => t.id === tile1.id || t.id === tile2.id ? {\n          ...t,\n          matched: true\n        } : t);\n        setBoard(newBoard);\n        setSelected([]);\n        setScore(score + 1);\n      } else {\n        // If the tiles don't match, deselect them after a short delay\n        setTimeout(() => setSelected([]), 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: board.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n        id: tile.id,\n        color: tile.color,\n        matched: tile.matched,\n        selected: tile.selected,\n        onClick: handleTileClick\n      }, tile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initializeBoard,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"arK2n3ugPI3lNP5JpnPo5eamw7s=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","Tile","jsxDEV","_jsxDEV","GameBoard","_s","board","setBoard","selected","setSelected","score","setScore","initializeBoard","colors","newBoard","i","randomIndex","Math","floor","random","length","push","id","color","matched","handleTileClick","tile","find","t","newSelected","tile1","tile2","map","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus/client/src/components/Gameboard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nconst GameBoard = () => {\r\n  const [board, setBoard] = useState([]);\r\n  const [selected, setSelected] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  // Initialize the board with random tiles\r\n  const initializeBoard = () => {\r\n    const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"];\r\n    const newBoard = [];\r\n    for (let i = 0; i < 16; i++) {\r\n      const randomIndex = Math.floor(Math.random() * colors.length);\r\n      newBoard.push({\r\n        id: i,\r\n        color: colors[randomIndex],\r\n        matched: false,\r\n        selected: false,\r\n      });\r\n    }\r\n    setBoard(newBoard);\r\n  };\r\n\r\n  // Handle tile clicks\r\n  const handleTileClick = (id) => {\r\n    // If the tile is already matched or selected, do nothing\r\n    const tile = board.find((t) => t.id === id);\r\n    if (tile.matched || tile.selected) {\r\n      return;\r\n    }\r\n\r\n    // Add the tile to the selected list\r\n    const newSelected = [...selected, id];\r\n    setSelected(newSelected);\r\n\r\n    // If two tiles are selected, check for a match\r\n    if (newSelected.length === 2) {\r\n      const tile1 = board.find((t) => t.id === newSelected[0]);\r\n      const tile2 = board.find((t) => t.id === newSelected[1]);\r\n      if (tile1.color === tile2.color) {\r\n        // If the tiles match, mark them as matched and clear the selected list\r\n        const newBoard = board.map((t) =>\r\n          t.id === tile1.id || t.id === tile2.id ? { ...t, matched: true } : t\r\n        );\r\n        setBoard(newBoard);\r\n        setSelected([]);\r\n        setScore(score + 1);\r\n      } else {\r\n        // If the tiles don't match, deselect them after a short delay\r\n        setTimeout(() => setSelected([]), 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Score: {score}</h2>\r\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {board.map((tile) => (\r\n          <Tile\r\n            key={tile.id}\r\n            id={tile.id}\r\n            color={tile.color}\r\n            matched={tile.matched}\r\n            selected={tile.selected}\r\n            onClick={handleTileClick}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button onClick={initializeBoard}>Restart</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
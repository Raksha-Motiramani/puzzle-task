{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus1\\\\client\\\\src\\\\components\\\\LeaderBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Leaderboard() {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    username,\n    score\n  } = location.state;\n  const [leaderboard, setLeaderboard] = useState([]);\n\n  // Fetch leaderboard data from backend and update leaderboard state\n  const updateLeaderboard = async () => {\n    const response = await fetch('http://localhost:5000/leaderboard');\n    const data = await response.json();\n    setLeaderboard(data);\n  };\n  useEffect(() => {\n    updateLeaderboard();\n  }, []);\n\n  // Submit user's score to backend when game is over and update leaderboard state\n  useEffect(() => {\n    if (score !== null) {\n      const submitScore = async () => {\n        try {\n          const response = await fetch('http://localhost:5000/leaderboard', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              username,\n              score\n            })\n          });\n          if (!response.ok) {\n            throw new Error('Failed to submit score');\n          }\n          console.log('Score submitted successfully');\n          updateLeaderboard();\n        } catch (err) {\n          console.error(err);\n        }\n      };\n      submitScore();\n    }\n  }, [username, score]);\n  function handleBackToMainPage() {\n    navigate('/Mainpage', {\n      state: {\n        username,\n        score\n      }\n    });\n  }\n\n  //   //Fetch leaderboard data from backend\n  // useEffect(() => {\n  //   async function fetchLeaderboard() {\n  //     const response = await fetch('http://localhost:5000/leaderboard');\n  //     const data = await response.json();\n  //     // Add current user's score to the leaderboard data\n  //     if (score !== null) {\n  //       data.push({ username, score });\n  //     }\n  //     // Sort the leaderboard data by score in descending order\n  //     data.sort((a, b) => b.score - a.score);\n  //     setLeaderboard(data);\n  //   }\n  //   fetchLeaderboard();\n  // }, [score, username]);\n\n  // // Submit user's score to backend when game is over\n  // useEffect(() => {\n  //   async function submitScore() {\n  //     try {\n  //       const response = await fetch('http://localhost:5000/leaderboard', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify({ username, score })\n  //       });\n  //       if (!response.ok) {\n  //         throw new Error('Failed to submit score');\n  //       }\n  //       console.log('Score submitted successfully');\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   }\n  //   if (score !== null) {\n  //     submitScore();\n  //   }\n  // }, [username, score]);\n\n  // function handleBackToMainPage() {\n  //   navigate('/Mainpage',{ state: { username, score } });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leaderboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Leaderboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"leaderboard-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Rank\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: leaderboard.map((player, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: player.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: player.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, player._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-to-main-page-button\",\n      onClick: handleBackToMainPage,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(Leaderboard, \"GfAKm2k3xRT09W1CWULhFlDsnro=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Leaderboard;\nexport default Leaderboard;\nvar _c;\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","jsxDEV","_jsxDEV","Leaderboard","_s","location","navigate","username","score","state","leaderboard","setLeaderboard","updateLeaderboard","response","fetch","data","json","submitScore","method","headers","body","JSON","stringify","ok","Error","console","log","err","error","handleBackToMainPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","player","index","_id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus1/client/src/components/LeaderBoard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation , useNavigate } from 'react-router-dom';\r\n\r\nfunction Leaderboard() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { username , score } = location.state;\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n\r\n  // Fetch leaderboard data from backend and update leaderboard state\r\n  const updateLeaderboard = async () => {\r\n    const response = await fetch('http://localhost:5000/leaderboard');\r\n    const data = await response.json();\r\n    setLeaderboard(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateLeaderboard();\r\n  }, []);\r\n\r\n  // Submit user's score to backend when game is over and update leaderboard state\r\n  useEffect(() => {\r\n    if (score !== null) {\r\n      const submitScore = async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/leaderboard', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ username, score })\r\n          });\r\n          if (!response.ok) {\r\n            throw new Error('Failed to submit score');\r\n          }\r\n          console.log('Score submitted successfully');\r\n          updateLeaderboard();\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      };\r\n      submitScore();\r\n    }\r\n  }, [username, score]);\r\n\r\n  function handleBackToMainPage() {\r\n    navigate('/Mainpage',{ state: { username, score } });\r\n  }\r\n\r\n\r\n  //   //Fetch leaderboard data from backend\r\n  // useEffect(() => {\r\n  //   async function fetchLeaderboard() {\r\n  //     const response = await fetch('http://localhost:5000/leaderboard');\r\n  //     const data = await response.json();\r\n  //     // Add current user's score to the leaderboard data\r\n  //     if (score !== null) {\r\n  //       data.push({ username, score });\r\n  //     }\r\n  //     // Sort the leaderboard data by score in descending order\r\n  //     data.sort((a, b) => b.score - a.score);\r\n  //     setLeaderboard(data);\r\n  //   }\r\n  //   fetchLeaderboard();\r\n  // }, [score, username]);\r\n\r\n\r\n  // // Submit user's score to backend when game is over\r\n  // useEffect(() => {\r\n  //   async function submitScore() {\r\n  //     try {\r\n  //       const response = await fetch('http://localhost:5000/leaderboard', {\r\n  //         method: 'POST',\r\n  //         headers: {\r\n  //           'Content-Type': 'application/json'\r\n  //         },\r\n  //         body: JSON.stringify({ username, score })\r\n  //       });\r\n  //       if (!response.ok) {\r\n  //         throw new Error('Failed to submit score');\r\n  //       }\r\n  //       console.log('Score submitted successfully');\r\n  //     } catch (err) {\r\n  //       console.error(err);\r\n  //     }\r\n  //   }\r\n  //   if (score !== null) {\r\n  //     submitScore();\r\n  //   }\r\n  // }, [username, score]);\r\n\r\n  // function handleBackToMainPage() {\r\n  //   navigate('/Mainpage',{ state: { username, score } });\r\n  // }\r\n\r\n  \r\n\r\n  return (  \r\n    <div className=\"leaderboard-container\">\r\n      <h2>Leaderboard</h2>\r\n      <table className=\"leaderboard-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Rank</th>\r\n            <th>Username</th>\r\n            <th>Score</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {leaderboard.map((player, index) => (\r\n            <tr key={player._id}>\r\n              <td>{index + 1}</td>\r\n              <td>{player.username}</td>\r\n              <td>{player.score}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>      \r\n      <button className=\"back-to-main-page-button\" onClick={handleBackToMainPage}>Back</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Leaderboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
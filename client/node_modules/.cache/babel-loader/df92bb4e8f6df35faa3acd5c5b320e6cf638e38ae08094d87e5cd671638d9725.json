{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus1\\\\client\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\nimport LeaderBoard from './LeaderBoard';\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gameboard = props => {\n  _s();\n  //const location = useLocation();\n  //const { username } = location.state;\n\n  const shuffle = array => {\n    for (let i = 0; i < array.length; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const [tiles, setTiles] = useState(shuffle([{\n    id: 1,\n    color: \"red\"\n  }, {\n    id: 2,\n    color: \"blue\"\n  }, {\n    id: 3,\n    color: \"green\"\n  }, {\n    id: 4,\n    color: \"olive\"\n  }, {\n    id: 5,\n    color: \"red\"\n  }, {\n    id: 6,\n    color: \"yellow\"\n  }, {\n    id: 7,\n    color: \"pink\"\n  }, {\n    id: 8,\n    color: \"pink\"\n  }, {\n    id: 9,\n    color: \"green\"\n  }, {\n    id: 10,\n    color: \"blue\"\n  }, {\n    id: 11,\n    color: \"olive\"\n  }, {\n    id: 12,\n    color: \"yellow\"\n  }]));\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [id1, id2] = selectedTileIds;\n      if (id1 && id2) {\n        const tile1 = tiles.find(tile => tile.id === id1);\n        const tile2 = tiles.find(tile => tile.id === id2);\n        if (tile1.color === tile2.color) {\n          setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, id1, id2]);\n          setScore(prevScore => prevScore + 10);\n        }\n        // else {\n        //     setScore((prevScore) => prevScore - 1);\n        // }\n        setSelectedTileIds([]);\n      }\n    };\n    checkForMatch();\n    // if (matchedTileIds.length === tiles.length) {\n    //     onGameOver(score);\n    // }\n  }, [selectedTileIds, tiles, matchedTileIds, score]);\n  const handleTileClick = id => {\n    if (matchedTileIds.includes(id)) {\n      return;\n    }\n    if (selectedTileIds.includes(id)) {\n      setSelectedTileIds(prevSelectedTileIds => prevSelectedTileIds.filter(tileId => tileId !== id));\n      return;\n    }\n    if (selectedTileIds.length === 2) {\n      return;\n    }\n    setSelectedTileIds(prevSelectedTileIds => [...prevSelectedTileIds, id]);\n    if (selectedTileIds.length === 1) {\n      const [prevId] = selectedTileIds;\n      const prevTile = tiles.find(tile => tile.id === prevId);\n      const currentTile = tiles.find(tile => tile.id === id);\n      if (prevTile.color === currentTile.color) {\n        setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, prevId, id]);\n        //setScore((prevScore) => prevScore + 10);\n      } else {\n        setScore(prevScore => prevScore - 1);\n      }\n    }\n  };\n  const handleRestartClick = () => {\n    setTiles(prevTiles => prevTiles.map(tile => ({\n      ...tile,\n      matched: false\n    })));\n    setSelectedTileIds([]);\n    setMatchedTileIds([]);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-container\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"score-text\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: tiles.map(_ref => {\n        let {\n          id,\n          color\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: id,\n          color: color,\n          matched: matchedTileIds.includes(id),\n          selected: selectedTileIds.includes(id),\n          onClick: () => handleTileClick(id)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: \"16px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-button\",\n        onClick: handleRestartClick,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Gameboard, \"Vna3D+DKOK2MwzID6a602UJdlrk=\");\n_c = Gameboard;\nexport default Gameboard;\n\n// ========================================================================================================================================================\n\n// import React, { useState, useEffect } from \"react\";\n// import Tile from \"./Tile\";\n// import Scoreboard from \"./Scoreboard\";\n\n// const GameBoard = ({ username }) => {\n//   const [tiles, setTiles] = useState([]);\n//   const [selectedTileIds, setSelectedTileIds] = useState([]);\n//   const [score, setScore] = useState(0);\n//   const [gameOver, setGameOver] = useState(false);\n\n//   useEffect(() => {\n//     // Initialize the game board\n//     const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"];\n//     const newTiles = [];\n//     for (let i = 0; i < 36; i += 2) {\n//       const color = colors[Math.floor(Math.random() * colors.length)];\n//       newTiles.push({ id: i, color: color });\n//       newTiles.push({ id: i + 1, color: color });\n//     }\n//     setTiles(newTiles.sort(() => Math.random() - 0.5));\n//   }, []);\n\n//   useEffect(() => {\n//     // Check for game over condition\n//     if (tiles.length === 0) {\n//       setGameOver(true);\n//       fetch(\"backend-url\", {\n//         method: \"POST\",\n//         body: JSON.stringify({ username: username, score: score }),\n//         headers: {\n//           \"Content-type\": \"application/json; charset=UTF-8\",\n//         },\n//       })\n//         .then((response) => response.json())\n//         .then((data) => console.log(data))\n//         .catch((error) => console.log(error));\n//     }\n//   }, [tiles, username, score]);\n\n//   const handleTileClick = (id) => {\n//     if (selectedTileIds.length === 1) {\n//       const [prevId] = selectedTileIds;\n//       const prevTile = tiles.find((tile) => tile.id === prevId);\n//       const currentTile = tiles.find((tile) => tile.id === id);\n\n//       if (prevTile.color === currentTile.color) {\n//         setTiles(tiles.filter((tile) => tile.id !== prevId && tile.id !== id));\n//         setSelectedTileIds([]);\n//         setScore(score + 10);\n//       } else {\n//         setSelectedTileIds([...selectedTileIds, id]);\n//         setScore(score - 2);\n//       }\n//     } else {\n//       setSelectedTileIds([id]);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {gameOver ? (\n//         <h1>Game Over! Your score is {score}</h1>\n//       ) : (\n//         <div className=\"game-board\">\n//           {tiles.map((tile) => (\n//             <Tile\n//               key={tile.id}\n//               id={tile.id}\n//               color={tile.color}\n//               onClick={() => handleTileClick(tile.id)}\n//             />\n//           ))}\n//         </div>\n//       )}\n//       <Scoreboard username={username} score={score} />\n//     </div>\n//   );\n// };\n\n// export default GameBoard;\n\n// //   const handleTileClick = (id) => {\n// //     if (matchedTileIds.includes(id)) {\n// //       return;\n// //     }\n\n// //     if (selectedTileIds.length === 2) {\n// //       return;\n// //     }\n\n// //     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\n// //     if (selectedTileIds.length === 1) {\n// //         const [prevId] = selectedTileIds;\n// //         const prevTile = tiles.find((tile) => tile.id === prevId);\n// //         const currentTile = tiles.find((tile) => tile.id === id);\n\n// //         if (prevTile.color === currentTile.color) {\n// //           setMatchedTileIds((prevMatchedTileIds) => [\n// //             ...prevMatchedTileIds,\n// //             prevId,\n// //             id,\n// //           ]);\n// //         }\n// //       }\n// //   };\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","useEffect","Tile","LeaderBoard","useLocation","jsxDEV","_jsxDEV","Gameboard","props","_s","shuffle","array","i","length","j","Math","floor","random","tiles","setTiles","id","color","selectedTileIds","setSelectedTileIds","matchedTileIds","setMatchedTileIds","score","setScore","checkForMatch","id1","id2","tile1","find","tile","tile2","prevMatchedTileIds","prevScore","handleTileClick","includes","prevSelectedTileIds","filter","tileId","prevId","prevTile","currentTile","handleRestartClick","prevTiles","map","matched","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","_ref","selected","onClick","alignItems","justifyContent","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus1/client/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport LeaderBoard from './LeaderBoard';\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Gameboard = (props) => {\r\n  //const location = useLocation();\r\n  //const { username } = location.state;\r\n\r\n  const shuffle = (array) => {\r\n    for (let i = 0; i < array.length ; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n \r\n\r\n  const [tiles, setTiles] = useState(\r\n    shuffle([\r\n      { id: 1, color: \"red\" },\r\n      { id: 2, color: \"blue\" },\r\n      { id: 3, color: \"green\" },\r\n      { id: 4, color: \"olive\" },\r\n      { id: 5, color: \"red\" },\r\n      { id: 6, color: \"yellow\" },\r\n      { id: 7, color: \"pink\" },\r\n      { id: 8, color: \"pink\" },\r\n      { id: 9, color: \"green\" },\r\n      { id: 10, color: \"blue\" },\r\n      { id: 11, color: \"olive\" },\r\n      { id: 12, color: \"yellow\" },\r\n    ])\r\n  );\r\n\r\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const checkForMatch = () => {\r\n      const [id1, id2] = selectedTileIds;\r\n      if (id1 && id2) {\r\n        const tile1 = tiles.find((tile) => tile.id === id1);\r\n        const tile2 = tiles.find((tile) => tile.id === id2);\r\n        if (tile1.color === tile2.color) {\r\n          setMatchedTileIds((prevMatchedTileIds) => [\r\n            ...prevMatchedTileIds,\r\n            id1,\r\n            id2,\r\n          ]);\r\n          setScore((prevScore) => prevScore + 10);\r\n        }\r\n        // else {\r\n        //     setScore((prevScore) => prevScore - 1);\r\n        // }\r\n        setSelectedTileIds([]);\r\n      }\r\n    };\r\n    checkForMatch();\r\n    // if (matchedTileIds.length === tiles.length) {\r\n    //     onGameOver(score);\r\n    // }\r\n  \r\n  }, [selectedTileIds, tiles, matchedTileIds, score]);\r\n\r\nconst handleTileClick = (id) => {\r\n    if (matchedTileIds.includes(id)) {\r\n      return;\r\n    }\r\n  \r\n    if (selectedTileIds.includes(id)) {\r\n      setSelectedTileIds((prevSelectedTileIds) => prevSelectedTileIds.filter((tileId) => tileId !== id));\r\n      return;\r\n    }\r\n  \r\n    if (selectedTileIds.length === 2) {\r\n      return;\r\n    }\r\n  \r\n    setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n  \r\n    if (selectedTileIds.length === 1) {\r\n      const [prevId] = selectedTileIds;\r\n      const prevTile = tiles.find((tile) => tile.id === prevId);\r\n      const currentTile = tiles.find((tile) => tile.id === id);\r\n  \r\n      if (prevTile.color === currentTile.color) {\r\n        setMatchedTileIds((prevMatchedTileIds) => [\r\n          ...prevMatchedTileIds,\r\n          prevId,\r\n          id,\r\n        ]);\r\n        //setScore((prevScore) => prevScore + 10);\r\n      } else {\r\n        setScore((prevScore) => prevScore - 1);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  const handleRestartClick = () => {\r\n    setTiles((prevTiles) =>\r\n      prevTiles.map((tile) => ({ ...tile, matched: false }))\r\n    );\r\n    setSelectedTileIds([]);\r\n    setMatchedTileIds([]);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className=\"score-container\">\r\n        <span className=\"score-text\">Score: {score}</span>\r\n      </div>\r\n      <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {tiles.map(({ id, color }) => (\r\n          <Tile\r\n            key={id}\r\n            id={id}\r\n            color={color}\r\n            matched={matchedTileIds.includes(id)}\r\n            selected={selectedTileIds.includes(id)}\r\n            onClick={() => handleTileClick(id)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginTop: \"16px\",\r\n        }}\r\n      >\r\n        <button className=\"restart-button\" onClick={handleRestartClick}>\r\n          Restart\r\n        </button>\r\n      </div>\r\n      {/* <div>\r\n        <LeaderBoard username={username} score={score}/>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameboard;\r\n\r\n\r\n// ========================================================================================================================================================\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Tile from \"./Tile\";\r\n// import Scoreboard from \"./Scoreboard\";\r\n\r\n// const GameBoard = ({ username }) => {\r\n//   const [tiles, setTiles] = useState([]);\r\n//   const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n//   const [score, setScore] = useState(0);\r\n//   const [gameOver, setGameOver] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     // Initialize the game board\r\n//     const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"];\r\n//     const newTiles = [];\r\n//     for (let i = 0; i < 36; i += 2) {\r\n//       const color = colors[Math.floor(Math.random() * colors.length)];\r\n//       newTiles.push({ id: i, color: color });\r\n//       newTiles.push({ id: i + 1, color: color });\r\n//     }\r\n//     setTiles(newTiles.sort(() => Math.random() - 0.5));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     // Check for game over condition\r\n//     if (tiles.length === 0) {\r\n//       setGameOver(true);\r\n//       fetch(\"backend-url\", {\r\n//         method: \"POST\",\r\n//         body: JSON.stringify({ username: username, score: score }),\r\n//         headers: {\r\n//           \"Content-type\": \"application/json; charset=UTF-8\",\r\n//         },\r\n//       })\r\n//         .then((response) => response.json())\r\n//         .then((data) => console.log(data))\r\n//         .catch((error) => console.log(error));\r\n//     }\r\n//   }, [tiles, username, score]);\r\n\r\n//   const handleTileClick = (id) => {\r\n//     if (selectedTileIds.length === 1) {\r\n//       const [prevId] = selectedTileIds;\r\n//       const prevTile = tiles.find((tile) => tile.id === prevId);\r\n//       const currentTile = tiles.find((tile) => tile.id === id);\r\n\r\n//       if (prevTile.color === currentTile.color) {\r\n//         setTiles(tiles.filter((tile) => tile.id !== prevId && tile.id !== id));\r\n//         setSelectedTileIds([]);\r\n//         setScore(score + 10);\r\n//       } else {\r\n//         setSelectedTileIds([...selectedTileIds, id]);\r\n//         setScore(score - 2);\r\n//       }\r\n//     } else {\r\n//       setSelectedTileIds([id]);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       {gameOver ? (\r\n//         <h1>Game Over! Your score is {score}</h1>\r\n//       ) : (\r\n//         <div className=\"game-board\">\r\n//           {tiles.map((tile) => (\r\n//             <Tile\r\n//               key={tile.id}\r\n//               id={tile.id}\r\n//               color={tile.color}\r\n//               onClick={() => handleTileClick(tile.id)}\r\n//             />\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//       <Scoreboard username={username} score={score} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GameBoard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// //   const handleTileClick = (id) => {\r\n// //     if (matchedTileIds.includes(id)) {\r\n// //       return;\r\n// //     }\r\n\r\n// //     if (selectedTileIds.length === 2) {\r\n// //       return;\r\n// //     }\r\n\r\n// //     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n// //     if (selectedTileIds.length === 1) {\r\n// //         const [prevId] = selectedTileIds;\r\n// //         const prevTile = tiles.find((tile) => tile.id === prevId);\r\n// //         const currentTile = tiles.find((tile) => tile.id === id);\r\n    \r\n// //         if (prevTile.color === currentTile.color) {\r\n// //           setMatchedTileIds((prevMatchedTileIds) => [\r\n// //             ...prevMatchedTileIds,\r\n// //             prevId,\r\n// //             id,\r\n// //           ]);\r\n// //         }\r\n// //       }\r\n// //   };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus1\\\\client\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Tile from \"./Tile\";\n// import LeaderBoard from './LeaderBoard';\n// import { useLocation } from \"react-router-dom\";\n\n// const Game = (props) => {\n//   //const location = useLocation();\n//   //const { username } = location.state;\n\n//   const shuffle = (array) => {\n//     for (let i = 0; i < array.length ; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [array[i], array[j]] = [array[j], array[i]];\n//     }\n//     return array;\n//   };\n\n//   const [tiles, setTiles] = useState(\n//     shuffle([\n//       { id: 1, color: \"red\" },\n//       { id: 2, color: \"blue\" },\n//       { id: 3, color: \"green\" },\n//       { id: 4, color: \"olive\" },\n//       { id: 5, color: \"red\" },\n//       { id: 6, color: \"yellow\" },\n//       { id: 7, color: \"pink\" },\n//       { id: 8, color: \"pink\" },\n//       { id: 9, color: \"green\" },\n//       { id: 10, color: \"blue\" },\n//       { id: 11, color: \"olive\" },\n//       { id: 12, color: \"yellow\" },\n//     ])\n//   );\n\n//   const [selectedTileIds, setSelectedTileIds] = useState([]);\n//   const [matchedTileIds, setMatchedTileIds] = useState([]);\n//   const [score, setScore] = useState(0);\n\n//   useEffect(() => {\n//     const checkForMatch = () => {\n//       const [id1, id2] = selectedTileIds;\n//       if (id1 && id2) {\n//         const tile1 = tiles.find((tile) => tile.id === id1);\n//         const tile2 = tiles.find((tile) => tile.id === id2);\n//         if (tile1.color === tile2.color) {\n//           setMatchedTileIds((prevMatchedTileIds) => [\n//             ...prevMatchedTileIds,\n//             id1,\n//             id2,\n//           ]);\n//           setScore((prevScore) => prevScore + 10);\n//         }\n//         // else {\n//         //     setScore((prevScore) => prevScore - 1);\n//         // }\n//         setSelectedTileIds([]);\n//       }\n//     };\n//     checkForMatch();\n//     // if (matchedTileIds.length === tiles.length) {\n//     //     onGameOver(score);\n//     // }\n\n//   }, [selectedTileIds, tiles, matchedTileIds, score]);\n\n// const handleTileClick = (id) => {\n//     if (matchedTileIds.includes(id)) {\n//       return;\n//     }\n\n//     if (selectedTileIds.includes(id)) {\n//       setSelectedTileIds((prevSelectedTileIds) => prevSelectedTileIds.filter((tileId) => tileId !== id));\n//       return;\n//     }\n\n//     if (selectedTileIds.length === 2) {\n//       return;\n//     }\n\n//     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\n\n//     if (selectedTileIds.length === 1) {\n//       const [prevId] = selectedTileIds;\n//       const prevTile = tiles.find((tile) => tile.id === prevId);\n//       const currentTile = tiles.find((tile) => tile.id === id);\n\n//       if (prevTile.color === currentTile.color) {\n//         setMatchedTileIds((prevMatchedTileIds) => [\n//           ...prevMatchedTileIds,\n//           prevId,\n//           id,\n//         ]);\n//         //setScore((prevScore) => prevScore + 10);\n//       } else {\n//         setScore((prevScore) => prevScore - 1);\n//       }\n//     }\n//   };\n\n//   const handleRestartClick = () => {\n//     setTiles((prevTiles) =>\n//       prevTiles.map((tile) => ({ ...tile, matched: false }))\n//     );\n//     setSelectedTileIds([]);\n//     setMatchedTileIds([]);\n//     setScore(0);\n//   };\n\n//   return (\n//     <div className=\"grid-container\">\n//       <div className=\"score-container\">\n//         <span className=\"score-text\">Score: {score}</span>\n//       </div>\n//       <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n//         {tiles.map(({ id, color }) => (\n//           <Tile\n//             key={id}\n//             id={id}\n//             color={color}\n//             matched={matchedTileIds.includes(id)}\n//             selected={selectedTileIds.includes(id)}\n//             onClick={() => handleTileClick(id)}\n//           />\n//         ))}\n//       </div>\n//       <div\n//         style={{\n//           display: \"flex\",\n//           alignItems: \"center\",\n//           justifyContent: \"center\",\n//           marginTop: \"16px\",\n//         }}\n//       >\n//         <button className=\"restart-button\" onClick={handleRestartClick}>\n//           Restart\n//         </button>\n//       </div>\n//       {/* <div>\n//         <LeaderBoard username={username} score={score}/>\n//       </div> */}\n//     </div>\n//   );\n// };\n\n// export default Game;\n\n// ========================================================================================================================================================\n\nimport React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\n//import Scoreboard from \"./Scoreboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = _ref => {\n  _s();\n  let {\n    username\n  } = _ref;\n  const [tiles, setTiles] = useState([]);\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    // Initialize the game board\n    const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"];\n    const newTiles = [];\n    for (let i = 0; i < 36; i += 2) {\n      const color = colors[Math.floor(Math.random() * colors.length)];\n      newTiles.push({\n        id: i,\n        color: color\n      });\n      newTiles.push({\n        id: i + 1,\n        color: color\n      });\n    }\n    setTiles(newTiles.sort(() => Math.random() - 0.5));\n  }, []);\n  useEffect(() => {\n    // Check for game over condition\n    if (tiles.length === 0) {\n      setGameOver(true);\n      fetch(\"backend-url\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          username: username,\n          score: score\n        }),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }).then(response => response.json()).then(data => console.log(data)).catch(error => console.log(error));\n    }\n  }, [tiles, username, score]);\n  const handleTileClick = id => {\n    if (selectedTileIds.length === 1) {\n      const [prevId] = selectedTileIds;\n      const prevTile = tiles.find(tile => tile.id === prevId);\n      const currentTile = tiles.find(tile => tile.id === id);\n      if (prevTile.color === currentTile.color) {\n        setTiles(tiles.filter(tile => tile.id !== prevId && tile.id !== id));\n        setSelectedTileIds([]);\n        setScore(score + 10);\n      } else {\n        setSelectedTileIds([...selectedTileIds, id]);\n        setScore(score - 2);\n      }\n    } else {\n      setSelectedTileIds([id]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameOver ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Game Over! Your score is \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: tiles.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n        id: tile.id,\n        color: tile.color,\n        onClick: () => handleTileClick(tile.id)\n      }, tile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"fFFHBD7geq2ns4HiupteZAyPGh4=\");\n_c = Game;\nexport default Game;\n\n//   const handleTileClick = (id) => {\n//     if (matchedTileIds.includes(id)) {\n//       return;\n//     }\n\n//     if (selectedTileIds.length === 2) {\n//       return;\n//     }\n\n//     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\n//     if (selectedTileIds.length === 1) {\n//         const [prevId] = selectedTileIds;\n//         const prevTile = tiles.find((tile) => tile.id === prevId);\n//         const currentTile = tiles.find((tile) => tile.id === id);\n\n//         if (prevTile.color === currentTile.color) {\n//           setMatchedTileIds((prevMatchedTileIds) => [\n//             ...prevMatchedTileIds,\n//             prevId,\n//             id,\n//           ]);\n//         }\n//       }\n//   };\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Tile","jsxDEV","_jsxDEV","Game","_ref","_s","username","tiles","setTiles","selectedTileIds","setSelectedTileIds","score","setScore","gameOver","setGameOver","colors","newTiles","i","color","Math","floor","random","length","push","id","sort","fetch","method","body","JSON","stringify","headers","then","response","json","data","console","log","catch","error","handleTileClick","prevId","prevTile","find","tile","currentTile","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus1/client/src/components/Game.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Tile from \"./Tile\";\r\n// import LeaderBoard from './LeaderBoard';\r\n// import { useLocation } from \"react-router-dom\";\r\n\r\n// const Game = (props) => {\r\n//   //const location = useLocation();\r\n//   //const { username } = location.state;\r\n\r\n//   const shuffle = (array) => {\r\n//     for (let i = 0; i < array.length ; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [array[i], array[j]] = [array[j], array[i]];\r\n//     }\r\n//     return array;\r\n//   };\r\n \r\n\r\n//   const [tiles, setTiles] = useState(\r\n//     shuffle([\r\n//       { id: 1, color: \"red\" },\r\n//       { id: 2, color: \"blue\" },\r\n//       { id: 3, color: \"green\" },\r\n//       { id: 4, color: \"olive\" },\r\n//       { id: 5, color: \"red\" },\r\n//       { id: 6, color: \"yellow\" },\r\n//       { id: 7, color: \"pink\" },\r\n//       { id: 8, color: \"pink\" },\r\n//       { id: 9, color: \"green\" },\r\n//       { id: 10, color: \"blue\" },\r\n//       { id: 11, color: \"olive\" },\r\n//       { id: 12, color: \"yellow\" },\r\n//     ])\r\n//   );\r\n\r\n//   const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n//   const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n//   const [score, setScore] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const checkForMatch = () => {\r\n//       const [id1, id2] = selectedTileIds;\r\n//       if (id1 && id2) {\r\n//         const tile1 = tiles.find((tile) => tile.id === id1);\r\n//         const tile2 = tiles.find((tile) => tile.id === id2);\r\n//         if (tile1.color === tile2.color) {\r\n//           setMatchedTileIds((prevMatchedTileIds) => [\r\n//             ...prevMatchedTileIds,\r\n//             id1,\r\n//             id2,\r\n//           ]);\r\n//           setScore((prevScore) => prevScore + 10);\r\n//         }\r\n//         // else {\r\n//         //     setScore((prevScore) => prevScore - 1);\r\n//         // }\r\n//         setSelectedTileIds([]);\r\n//       }\r\n//     };\r\n//     checkForMatch();\r\n//     // if (matchedTileIds.length === tiles.length) {\r\n//     //     onGameOver(score);\r\n//     // }\r\n  \r\n//   }, [selectedTileIds, tiles, matchedTileIds, score]);\r\n\r\n// const handleTileClick = (id) => {\r\n//     if (matchedTileIds.includes(id)) {\r\n//       return;\r\n//     }\r\n  \r\n//     if (selectedTileIds.includes(id)) {\r\n//       setSelectedTileIds((prevSelectedTileIds) => prevSelectedTileIds.filter((tileId) => tileId !== id));\r\n//       return;\r\n//     }\r\n  \r\n//     if (selectedTileIds.length === 2) {\r\n//       return;\r\n//     }\r\n  \r\n//     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n  \r\n//     if (selectedTileIds.length === 1) {\r\n//       const [prevId] = selectedTileIds;\r\n//       const prevTile = tiles.find((tile) => tile.id === prevId);\r\n//       const currentTile = tiles.find((tile) => tile.id === id);\r\n  \r\n//       if (prevTile.color === currentTile.color) {\r\n//         setMatchedTileIds((prevMatchedTileIds) => [\r\n//           ...prevMatchedTileIds,\r\n//           prevId,\r\n//           id,\r\n//         ]);\r\n//         //setScore((prevScore) => prevScore + 10);\r\n//       } else {\r\n//         setScore((prevScore) => prevScore - 1);\r\n//       }\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleRestartClick = () => {\r\n//     setTiles((prevTiles) =>\r\n//       prevTiles.map((tile) => ({ ...tile, matched: false }))\r\n//     );\r\n//     setSelectedTileIds([]);\r\n//     setMatchedTileIds([]);\r\n//     setScore(0);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"grid-container\">\r\n//       <div className=\"score-container\">\r\n//         <span className=\"score-text\">Score: {score}</span>\r\n//       </div>\r\n//       <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n//         {tiles.map(({ id, color }) => (\r\n//           <Tile\r\n//             key={id}\r\n//             id={id}\r\n//             color={color}\r\n//             matched={matchedTileIds.includes(id)}\r\n//             selected={selectedTileIds.includes(id)}\r\n//             onClick={() => handleTileClick(id)}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div\r\n//         style={{\r\n//           display: \"flex\",\r\n//           alignItems: \"center\",\r\n//           justifyContent: \"center\",\r\n//           marginTop: \"16px\",\r\n//         }}\r\n//       >\r\n//         <button className=\"restart-button\" onClick={handleRestartClick}>\r\n//           Restart\r\n//         </button>\r\n//       </div>\r\n//       {/* <div>\r\n//         <LeaderBoard username={username} score={score}/>\r\n//       </div> */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Game;\r\n\r\n\r\n// ========================================================================================================================================================\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Tile from \"./Tile\";\r\n//import Scoreboard from \"./Scoreboard\";\r\n\r\nconst Game = ({ username }) => {\r\n  const [tiles, setTiles] = useState([]);\r\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize the game board\r\n    const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"];\r\n    const newTiles = [];\r\n    for (let i = 0; i < 36; i += 2) {\r\n      const color = colors[Math.floor(Math.random() * colors.length)];\r\n      newTiles.push({ id: i, color: color });\r\n      newTiles.push({ id: i + 1, color: color });\r\n    }\r\n    setTiles(newTiles.sort(() => Math.random() - 0.5));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Check for game over condition\r\n    if (tiles.length === 0) {\r\n      setGameOver(true);\r\n      fetch(\"backend-url\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ username: username, score: score }),\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => console.log(data))\r\n        .catch((error) => console.log(error));\r\n    }\r\n  }, [tiles, username, score]);\r\n\r\n  const handleTileClick = (id) => {\r\n    if (selectedTileIds.length === 1) {\r\n      const [prevId] = selectedTileIds;\r\n      const prevTile = tiles.find((tile) => tile.id === prevId);\r\n      const currentTile = tiles.find((tile) => tile.id === id);\r\n\r\n      if (prevTile.color === currentTile.color) {\r\n        setTiles(tiles.filter((tile) => tile.id !== prevId && tile.id !== id));\r\n        setSelectedTileIds([]);\r\n        setScore(score + 10);\r\n      } else {\r\n        setSelectedTileIds([...selectedTileIds, id]);\r\n        setScore(score - 2);\r\n      }\r\n    } else {\r\n      setSelectedTileIds([id]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {gameOver ? (\r\n        <h1>Game Over! Your score is {score}</h1>\r\n      ) : (\r\n        <div className=\"game-board\">\r\n          {tiles.map((tile) => (\r\n            <Tile\r\n              key={tile.id}\r\n              id={tile.id}\r\n              color={tile.color}\r\n              onClick={() => handleTileClick(tile.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n      {/* <Scoreboard username={username} score={score} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//   const handleTileClick = (id) => {\r\n//     if (matchedTileIds.includes(id)) {\r\n//       return;\r\n//     }\r\n\r\n//     if (selectedTileIds.length === 2) {\r\n//       return;\r\n//     }\r\n\r\n//     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n//     if (selectedTileIds.length === 1) {\r\n//         const [prevId] = selectedTileIds;\r\n//         const prevTile = tiles.find((tile) => tile.id === prevId);\r\n//         const currentTile = tiles.find((tile) => tile.id === id);\r\n    \r\n//         if (prevTile.color === currentTile.color) {\r\n//           setMatchedTileIds((prevMatchedTileIds) => [\r\n//             ...prevMatchedTileIds,\r\n//             prevId,\r\n//             id,\r\n//           ]);\r\n//         }\r\n//       }\r\n//   };"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,IAAI,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACxB,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus\\\\client\\\\src\\\\components\\\\Gameboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = () => {\n  _s();\n  const [tiles, setTiles] = useState([{\n    id: 1,\n    color: \"red\"\n  }, {\n    id: 2,\n    color: \"blue\"\n  }, {\n    id: 3,\n    color: \"green\"\n  }, {\n    id: 4,\n    color: \"olive\"\n  }, {\n    id: 5,\n    color: \"red\"\n  }, {\n    id: 6,\n    color: \"yellow\"\n  }, {\n    id: 7,\n    color: \"pink\"\n  }, {\n    id: 8,\n    color: \"pink\"\n  }, {\n    id: 9,\n    color: \"green\"\n  }, {\n    id: 10,\n    color: \"blue\"\n  }, {\n    id: 11,\n    color: \"olive\"\n  }, {\n    id: 12,\n    color: \"yellow\"\n  }]);\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [id1, id2] = selectedTileIds;\n      if (id1 && id2) {\n        const tile1 = tiles.find(tile => tile.id === id1);\n        const tile2 = tiles.find(tile => tile.id === id2);\n        if (tile1.color === tile2.color) {\n          setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, id1, id2]);\n        }\n        setSelectedTileIds([]);\n      }\n    };\n    checkForMatch();\n  }, [selectedTileIds, tiles]);\n  const handleTileClick = id => {\n    if (matchedTileIds.includes(id)) {\n      return;\n    }\n    if (selectedTileIds.length === 2) {\n      return;\n    }\n    setSelectedTileIds(prevSelectedTileIds => [...prevSelectedTileIds, id]);\n  };\n  const handleRestartClick = () => {\n    setTiles(prevTiles => prevTiles.map(tile => ({\n      ...tile,\n      matched: false\n    })));\n    setSelectedTileIds([]);\n    setMatchedTileIds([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    classname: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: tiles.map(_ref => {\n        let {\n          id,\n          color\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: id,\n          color: color,\n          matched: matchedTileIds.includes(id),\n          selected: selectedTileIds.includes(id),\n          onClick: () => handleTileClick(id)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"restart-button\",\n      onClick: handleRestartClick,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"m3mUPlHCFK2z8O+YGKtlR/+a31s=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Tile","jsxDEV","_jsxDEV","GameBoard","_s","tiles","setTiles","id","color","selectedTileIds","setSelectedTileIds","matchedTileIds","setMatchedTileIds","checkForMatch","id1","id2","tile1","find","tile","tile2","prevMatchedTileIds","handleTileClick","includes","length","prevSelectedTileIds","handleRestartClick","prevTiles","map","matched","classname","children","className","style","display","flexWrap","_ref","selected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus/client/src/components/Gameboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nconst GameBoard = () => {\r\n  const [tiles, setTiles] = useState([\r\n    { id: 1, color: \"red\" },\r\n    { id: 2, color: \"blue\" },\r\n    { id: 3, color: \"green\" },\r\n    { id: 4, color: \"olive\" },\r\n    { id: 5, color: \"red\" },\r\n    { id: 6, color: \"yellow\" },\r\n    { id: 7, color: \"pink\" },\r\n    { id: 8, color: \"pink\" },\r\n    { id: 9, color: \"green\" },\r\n    { id: 10, color: \"blue\" },\r\n    { id: 11, color: \"olive\" },\r\n    { id: 12, color: \"yellow\" },\r\n  ]);\r\n\r\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const checkForMatch = () => {\r\n      const [id1, id2] = selectedTileIds;\r\n      if (id1 && id2) {\r\n        const tile1 = tiles.find((tile) => tile.id === id1);\r\n        const tile2 = tiles.find((tile) => tile.id === id2);\r\n        if (tile1.color === tile2.color) {\r\n          setMatchedTileIds((prevMatchedTileIds) => [\r\n            ...prevMatchedTileIds,\r\n            id1,\r\n            id2,\r\n          ]);\r\n        }\r\n        setSelectedTileIds([]);\r\n      }\r\n    };\r\n    checkForMatch();\r\n  }, [selectedTileIds, tiles]);\r\n\r\n  const handleTileClick = (id) => {\r\n    if (matchedTileIds.includes(id)) {\r\n      return;\r\n    }\r\n\r\n    if (selectedTileIds.length === 2) {\r\n      return;\r\n    }\r\n\r\n    setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n  };\r\n\r\n  const handleRestartClick = () => {\r\n    setTiles((prevTiles) =>\r\n      prevTiles.map((tile) => ({ ...tile, matched: false }))\r\n    );\r\n    setSelectedTileIds([]);\r\n    setMatchedTileIds([]);\r\n  };\r\n\r\n  return (\r\n    <div classname=\"game-container\">\r\n      <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {tiles.map(({ id, color }) => (\r\n          <Tile\r\n            key={id}\r\n            id={id}\r\n            color={color}\r\n            matched={matchedTileIds.includes(id)}\r\n            selected={selectedTileIds.includes(id)}\r\n            onClick={() => handleTileClick(id)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button className=\"restart-button\" onClick={handleRestartClick}>Restart</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
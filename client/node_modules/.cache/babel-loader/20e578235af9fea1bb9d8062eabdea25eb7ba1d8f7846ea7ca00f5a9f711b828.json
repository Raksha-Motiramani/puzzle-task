{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus\\\\client\\\\src\\\\components\\\\Gameboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Tile from \"./Tile\";\n\n// const GameBoard = () => {\n//   const [tiles, setTiles] = useState([\n//     { id: 1, color: \"red\" },\n//     { id: 2, color: \"blue\" },\n//     { id: 3, color: \"green\" },\n//     { id: 4, color: \"olive\" },\n//     { id: 5, color: \"red\" },\n//     { id: 6, color: \"yellow\" },\n//     { id: 7, color: \"pink\" },\n//     { id: 8, color: \"pink\" },\n//     { id: 9, color: \"green\" },\n//     { id: 10, color: \"blue\" },\n//     { id: 11, color: \"olive\" },\n//     { id: 12, color: \"yellow\" },\n//   ]);\n\n//   const [selectedTileIds, setSelectedTileIds] = useState([]);\n//   const [matchedTileIds, setMatchedTileIds] = useState([]);\n\n//   useEffect(() => {\n//     const checkForMatch = () => {\n//       const [id1, id2] = selectedTileIds;\n//       if (id1 && id2) {\n//         const tile1 = tiles.find((tile) => tile.id === id1);\n//         const tile2 = tiles.find((tile) => tile.id === id2);\n//         if (tile1.color === tile2.color) {\n//           setMatchedTileIds((prevMatchedTileIds) => [\n//             ...prevMatchedTileIds,\n//             id1,\n//             id2,\n//           ]);\n//         }\n//         setSelectedTileIds([]);\n//       }\n//     };\n//     checkForMatch();\n//   }, [selectedTileIds, tiles]);\n\n//   const handleTileClick = (id) => {\n//     if (matchedTileIds.includes(id)) {\n//       return;\n//     }\n\n//     if (selectedTileIds.length === 2) {\n//       return;\n//     }\n\n//     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\n//   };\n\n//   const handleRestartClick = () => {\n//     setTiles((prevTiles) =>\n//       prevTiles.map((tile) => ({ ...tile, matched: false }))\n//     );\n//     setSelectedTileIds([]);\n//     setMatchedTileIds([]);\n//   };\n\n//   return (\n//     <div className=\"grid-container\">\n//       <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n//         {tiles.map(({ id, color }) => (\n//           <Tile\n//             key={id}\n//             id={id}\n//             color={color}\n//             matched={matchedTileIds.includes(id)}\n//             selected={selectedTileIds.includes(id)}\n//             onClick={() => handleTileClick(id)}\n//           />\n//         ))}\n//       </div>\n//       <div style={{\n//           display: \"flex\",\n//           alignItems: \"center\",\n//           justifyContent: \"center\",\n//           marginTop: \"16px\",\n//         }}\n//       >\n//         <button className=\"restart-button\" onClick={handleRestartClick}>\n//           Restart\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GameBoard;\n\nimport React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\", \"orange\"];\nfunction shuffle(array) {\n  // Fisher-Yates shuffle algorithm\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction GameBoard() {\n  _s();\n  const [tiles, setTiles] = useState([]);\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\n  const [score, setScore] = useState(0);\n  const [timer, setTimer] = useState(60);\n  useEffect(() => {\n    // Generate a list of tiles with unique IDs and colors\n    const newTiles = colors.flatMap(color => [{\n      id: `${color}-1`,\n      color\n    }, {\n      id: `${color}-2`,\n      color\n    }]);\n    // Shuffle the list of tiles\n    const shuffledTiles = shuffle(newTiles);\n    setTiles(shuffledTiles);\n  }, []);\n  useEffect(() => {\n    // Start the timer\n    const intervalId = setInterval(() => {\n      setTimer(prevTimer => prevTimer - 1);\n    }, 1000);\n    // Stop the timer when it reaches 0\n    if (timer === 0) {\n      clearInterval(intervalId);\n      alert(`Game over! Your score is ${score}`);\n    }\n    // Clean up the interval\n    return () => clearInterval(intervalId);\n  }, [timer, score]);\n  function handleTileClick(id) {\n    if (selectedTileIds.length === 2) {\n      // Two tiles are already selected, so wait for them to be flipped back over\n      return;\n    }\n    if (matchedTileIds.includes(id)) {\n      // This tile is already matched, so ignore the click\n      return;\n    }\n    setSelectedTileIds(prevSelectedTileIds => [...prevSelectedTileIds, id]);\n    if (selectedTileIds.length === 1) {\n      // Two tiles have been selected, so check if they match\n      const [firstId, secondId] = selectedTileIds;\n      const [firstTile, secondTile] = tiles.filter(_ref => {\n        let {\n          id\n        } = _ref;\n        return id === firstId || id === secondId;\n      });\n      if (firstTile.color === secondTile.color) {\n        // The tiles match, so mark them as matched and update the score\n        setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, firstId, secondId]);\n        setScore(prevScore => prevScore + 10);\n      } else {\n        // The tiles don't match, so flip them back over after a short delay\n        setTimeout(() => {\n          setSelectedTileIds([]);\n          setScore(prevScore => prevScore - 1);\n        }, 1000);\n      }\n    }\n  }\n  function handleRestartClick() {\n    // Reset the game by shuffling the tiles and resetting the state variables\n    const shuffledTiles = shuffle(tiles);\n    setTiles(shuffledTiles);\n    setSelectedTileIds([]);\n    setMatchedTileIds([]);\n    setScore(0);\n    setTimer(60);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: tiles.map(_ref2 => {\n        let {\n          id,\n          color\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: id,\n          color: color,\n          matched: matchedTileIds.includes(id),\n          selected: selectedTileIds.includes(id),\n          onClick: () => handleTileClick(id)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-button\",\n        onClick: handleRestartClick,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"U5Ok4dYQ6oDFGdug8B++z3OpGBw=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Tile","jsxDEV","_jsxDEV","colors","shuffle","array","i","length","j","Math","floor","random","GameBoard","_s","tiles","setTiles","selectedTileIds","setSelectedTileIds","matchedTileIds","setMatchedTileIds","score","setScore","timer","setTimer","newTiles","flatMap","color","id","shuffledTiles","intervalId","setInterval","prevTimer","clearInterval","alert","handleTileClick","includes","prevSelectedTileIds","firstId","secondId","firstTile","secondTile","filter","_ref","prevMatchedTileIds","prevScore","setTimeout","handleRestartClick","className","children","style","display","flexWrap","map","_ref2","matched","selected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus/client/src/components/Gameboard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Tile from \"./Tile\";\r\n\r\n// const GameBoard = () => {\r\n//   const [tiles, setTiles] = useState([\r\n//     { id: 1, color: \"red\" },\r\n//     { id: 2, color: \"blue\" },\r\n//     { id: 3, color: \"green\" },\r\n//     { id: 4, color: \"olive\" },\r\n//     { id: 5, color: \"red\" },\r\n//     { id: 6, color: \"yellow\" },\r\n//     { id: 7, color: \"pink\" },\r\n//     { id: 8, color: \"pink\" },\r\n//     { id: 9, color: \"green\" },\r\n//     { id: 10, color: \"blue\" },\r\n//     { id: 11, color: \"olive\" },\r\n//     { id: 12, color: \"yellow\" },\r\n//   ]);\r\n\r\n//   const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n//   const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const checkForMatch = () => {\r\n//       const [id1, id2] = selectedTileIds;\r\n//       if (id1 && id2) {\r\n//         const tile1 = tiles.find((tile) => tile.id === id1);\r\n//         const tile2 = tiles.find((tile) => tile.id === id2);\r\n//         if (tile1.color === tile2.color) {\r\n//           setMatchedTileIds((prevMatchedTileIds) => [\r\n//             ...prevMatchedTileIds,\r\n//             id1,\r\n//             id2,\r\n//           ]);\r\n//         }\r\n//         setSelectedTileIds([]);\r\n//       }\r\n//     };\r\n//     checkForMatch();\r\n//   }, [selectedTileIds, tiles]);\r\n\r\n//   const handleTileClick = (id) => {\r\n//     if (matchedTileIds.includes(id)) {\r\n//       return;\r\n//     }\r\n\r\n//     if (selectedTileIds.length === 2) {\r\n//       return;\r\n//     }\r\n\r\n//     setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n//   };\r\n\r\n//   const handleRestartClick = () => {\r\n//     setTiles((prevTiles) =>\r\n//       prevTiles.map((tile) => ({ ...tile, matched: false }))\r\n//     );\r\n//     setSelectedTileIds([]);\r\n//     setMatchedTileIds([]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"grid-container\">\r\n//       <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n//         {tiles.map(({ id, color }) => (\r\n//           <Tile\r\n//             key={id}\r\n//             id={id}\r\n//             color={color}\r\n//             matched={matchedTileIds.includes(id)}\r\n//             selected={selectedTileIds.includes(id)}\r\n//             onClick={() => handleTileClick(id)}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//       <div style={{\r\n//           display: \"flex\",\r\n//           alignItems: \"center\",\r\n//           justifyContent: \"center\",\r\n//           marginTop: \"16px\",\r\n//         }}\r\n//       >\r\n//         <button className=\"restart-button\" onClick={handleRestartClick}>\r\n//           Restart\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GameBoard;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nconst colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\", \"orange\"];\r\n\r\nfunction shuffle(array) {\r\n  // Fisher-Yates shuffle algorithm\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction GameBoard() {\r\n  const [tiles, setTiles] = useState([]);\r\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [timer, setTimer] = useState(60);\r\n\r\n  useEffect(() => {\r\n    // Generate a list of tiles with unique IDs and colors\r\n    const newTiles = colors.flatMap((color) => [\r\n      { id: `${color}-1`, color },\r\n      { id: `${color}-2`, color },\r\n    ]);\r\n    // Shuffle the list of tiles\r\n    const shuffledTiles = shuffle(newTiles);\r\n    setTiles(shuffledTiles);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Start the timer\r\n    const intervalId = setInterval(() => {\r\n      setTimer((prevTimer) => prevTimer - 1);\r\n    }, 1000);\r\n    // Stop the timer when it reaches 0\r\n    if (timer === 0) {\r\n      clearInterval(intervalId);\r\n      alert(`Game over! Your score is ${score}`);\r\n    }\r\n    // Clean up the interval\r\n    return () => clearInterval(intervalId);\r\n  }, [timer, score]);\r\n\r\n  function handleTileClick(id) {\r\n    if (selectedTileIds.length === 2) {\r\n      // Two tiles are already selected, so wait for them to be flipped back over\r\n      return;\r\n    }\r\n    if (matchedTileIds.includes(id)) {\r\n      // This tile is already matched, so ignore the click\r\n      return;\r\n    }\r\n    setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n    if (selectedTileIds.length === 1) {\r\n      // Two tiles have been selected, so check if they match\r\n      const [firstId, secondId] = selectedTileIds;\r\n      const [firstTile, secondTile] = tiles.filter(\r\n        ({ id }) => id === firstId || id === secondId\r\n      );\r\n      if (firstTile.color === secondTile.color) {\r\n        // The tiles match, so mark them as matched and update the score\r\n        setMatchedTileIds((prevMatchedTileIds) => [\r\n          ...prevMatchedTileIds,\r\n          firstId,\r\n          secondId,\r\n        ]);\r\n        setScore((prevScore) => prevScore + 10);\r\n      } else {\r\n        // The tiles don't match, so flip them back over after a short delay\r\n        setTimeout(() => {\r\n          setSelectedTileIds([]);\r\n          setScore((prevScore) => prevScore - 1);\r\n        }, 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleRestartClick() {\r\n    // Reset the game by shuffling the tiles and resetting the state variables\r\n    const shuffledTiles = shuffle(tiles);\r\n    setTiles(shuffledTiles);\r\n    setSelectedTileIds([]);\r\n    setMatchedTileIds([]);\r\n    setScore(0);\r\n    setTimer(60);\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {/* Map through the tiles and render a Tile component for each */}\r\n        {tiles.map(({ id, color }) => (\r\n          <Tile\r\n            key={id}\r\n            id={id}\r\n            color={color}\r\n            matched={matchedTileIds.includes(id)}\r\n            selected={selectedTileIds.includes(id)}\r\n            onClick={() => handleTileClick(id)}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        {/* Render a button that calls the handleRestartClick function on click */}\r\n        <button className=\"restart-button\" onClick={handleRestartClick}>\r\n          Restart\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
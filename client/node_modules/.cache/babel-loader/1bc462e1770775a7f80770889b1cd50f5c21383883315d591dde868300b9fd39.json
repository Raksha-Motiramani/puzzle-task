{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moti Beker\\\\Desktop\\\\elitmus\\\\client\\\\src\\\\components\\\\Gameboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Tile from \"./Tile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = _ref => {\n  _s();\n  let {\n    onGameOver\n  } = _ref;\n  const shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const [tiles, setTiles] = useState(shuffle([{\n    id: 1,\n    color: \"red\"\n  }, {\n    id: 2,\n    color: \"blue\"\n  }, {\n    id: 3,\n    color: \"green\"\n  }, {\n    id: 4,\n    color: \"olive\"\n  }, {\n    id: 5,\n    color: \"red\"\n  }, {\n    id: 6,\n    color: \"yellow\"\n  }, {\n    id: 7,\n    color: \"pink\"\n  }, {\n    id: 8,\n    color: \"pink\"\n  }, {\n    id: 9,\n    color: \"green\"\n  }, {\n    id: 10,\n    color: \"blue\"\n  }, {\n    id: 11,\n    color: \"olive\"\n  }, {\n    id: 12,\n    color: \"yellow\"\n  }]));\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\n  const [score, setScore] = useState(0);\n  const [allTilesMatched, setAllTilesMatched] = useState(false);\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [id1, id2] = selectedTileIds;\n      if (id1 && id2) {\n        const tile1 = tiles.find(tile => tile.id === id1);\n        const tile2 = tiles.find(tile => tile.id === id2);\n        if (tile1.color === tile2.color) {\n          setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, id1, id2]);\n          setScore(prevScore => prevScore + 10);\n        } else {\n          setScore(prevScore => prevScore - 1);\n        }\n        setSelectedTileIds([]);\n      }\n    };\n    checkForMatch();\n    if (matchedTileIds.length === tiles.length) {\n      setAllTilesMatched(true);\n      onGameOver(score);\n    }\n  }, [selectedTileIds, tiles, matchedTileIds, score, onGameOver]);\n  const handleTileClick = id => {\n    if (matchedTileIds.includes(id)) {\n      return;\n    }\n    if (selectedTileIds.length === 2) {\n      return;\n    }\n    setSelectedTileIds(prevSelectedTileIds => [...prevSelectedTileIds, id]);\n    if (selectedTileIds.length === 1) {\n      const [prevId] = selectedTileIds;\n      const prevTile = tiles.find(tile => tile.id === prevId);\n      const currentTile = tiles.find(tile => tile.id === id);\n      if (prevTile.color === currentTile.color) {\n        setMatchedTileIds(prevMatchedTileIds => [...prevMatchedTileIds, prevId, id]);\n      }\n    }\n  };\n  const handleRestartClick = () => {\n    setTiles(prevTiles => prevTiles.map(tile => ({\n      ...tile,\n      matched: false\n    })));\n    setSelectedTileIds([]);\n    setMatchedTileIds([]);\n    setScore(0);\n  };\n  const handleReset = () => {\n    setTiles(shuffle(tiles));\n    setSelectedTileIds([]);\n    setMatchedTileIds([]);\n    setScore(0);\n    setAllTilesMatched(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-container\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"score-text\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: allTilesMatched ? /*#__PURE__*/_jsxDEV(GamePage, {\n        score: score,\n        onReset: handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 10\n      }, this) : tiles.map(_ref2 => {\n        let {\n          id,\n          color\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          id: id,\n          color: color,\n          matched: matchedTileIds.includes(id),\n          selected: selectedTileIds.includes(id),\n          onClick: () => handleTileClick(id)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: \"16px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-button\",\n        onClick: handleRestartClick,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"3m4wWpXFJB87AEsvSNhBEjBTCGA=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Tile","jsxDEV","_jsxDEV","GameBoard","_ref","_s","onGameOver","shuffle","array","i","length","j","Math","floor","random","tiles","setTiles","id","color","selectedTileIds","setSelectedTileIds","matchedTileIds","setMatchedTileIds","score","setScore","allTilesMatched","setAllTilesMatched","checkForMatch","id1","id2","tile1","find","tile","tile2","prevMatchedTileIds","prevScore","handleTileClick","includes","prevSelectedTileIds","prevId","prevTile","currentTile","handleRestartClick","prevTiles","map","matched","handleReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","GamePage","onReset","_ref2","selected","onClick","alignItems","justifyContent","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/Moti Beker/Desktop/elitmus/client/src/components/Gameboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nconst GameBoard = ({ onGameOver }) => {\r\n  const shuffle = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const [tiles, setTiles] = useState(\r\n    shuffle([\r\n      { id: 1, color: \"red\" },\r\n      { id: 2, color: \"blue\" },\r\n      { id: 3, color: \"green\" },\r\n      { id: 4, color: \"olive\" },\r\n      { id: 5, color: \"red\" },\r\n      { id: 6, color: \"yellow\" },\r\n      { id: 7, color: \"pink\" },\r\n      { id: 8, color: \"pink\" },\r\n      { id: 9, color: \"green\" },\r\n      { id: 10, color: \"blue\" },\r\n      { id: 11, color: \"olive\" },\r\n      { id: 12, color: \"yellow\" },\r\n    ])\r\n  );\r\n\r\n  const [selectedTileIds, setSelectedTileIds] = useState([]);\r\n  const [matchedTileIds, setMatchedTileIds] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [allTilesMatched, setAllTilesMatched] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkForMatch = () => {\r\n      const [id1, id2] = selectedTileIds;\r\n      if (id1 && id2) {\r\n        const tile1 = tiles.find((tile) => tile.id === id1);\r\n        const tile2 = tiles.find((tile) => tile.id === id2);\r\n        if (tile1.color === tile2.color) {\r\n          setMatchedTileIds((prevMatchedTileIds) => [\r\n            ...prevMatchedTileIds,\r\n            id1,\r\n            id2,\r\n          ]);\r\n          setScore((prevScore) => prevScore + 10);\r\n        }\r\n        else {\r\n            setScore((prevScore) => prevScore - 1);\r\n        }\r\n        setSelectedTileIds([]);\r\n      }\r\n    };\r\n    checkForMatch();\r\n    if (matchedTileIds.length === tiles.length) {\r\n        setAllTilesMatched(true);\r\n        onGameOver(score);\r\n    }\r\n  \r\n  }, [selectedTileIds, tiles, matchedTileIds, score, onGameOver ]);\r\n\r\n  const handleTileClick = (id) => {\r\n    if (matchedTileIds.includes(id)) {\r\n      return;\r\n    }\r\n\r\n    if (selectedTileIds.length === 2) {\r\n      return;\r\n    }\r\n\r\n    setSelectedTileIds((prevSelectedTileIds) => [...prevSelectedTileIds, id]);\r\n    if (selectedTileIds.length === 1) {\r\n        const [prevId] = selectedTileIds;\r\n        const prevTile = tiles.find((tile) => tile.id === prevId);\r\n        const currentTile = tiles.find((tile) => tile.id === id);\r\n    \r\n        if (prevTile.color === currentTile.color) {\r\n          setMatchedTileIds((prevMatchedTileIds) => [\r\n            ...prevMatchedTileIds,\r\n            prevId,\r\n            id,\r\n          ]);\r\n        }\r\n      }\r\n  };\r\n\r\n  const handleRestartClick = () => {\r\n    setTiles((prevTiles) =>\r\n      prevTiles.map((tile) => ({ ...tile, matched: false }))\r\n    );\r\n    setSelectedTileIds([]);\r\n    setMatchedTileIds([]);\r\n    setScore(0);\r\n  };\r\n\r\nconst handleReset = () => {\r\n    setTiles(shuffle(tiles));\r\n    setSelectedTileIds([]);\r\n    setMatchedTileIds([]);\r\n    setScore(0);\r\n    setAllTilesMatched(false);\r\n};\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className=\"score-container\">\r\n        <span className=\"score-text\">Score: {score}</span>\r\n      </div>\r\n      <div className=\"game-board\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n      {allTilesMatched ? (\r\n         <GamePage score={score} onReset={handleReset} /> ) : \r\n        (\r\n        tiles.map(({ id, color }) => (\r\n          <Tile\r\n            key={id}\r\n            id={id}\r\n            color={color}\r\n            matched={matchedTileIds.includes(id)}\r\n            selected={selectedTileIds.includes(id)}\r\n            onClick={() => handleTileClick(id)}\r\n          />\r\n        ))\r\n       )}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          marginTop: \"16px\",\r\n        }}\r\n      >\r\n        <button className=\"restart-button\" onClick={handleRestartClick}>\r\n          Restart\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGC,IAAA,IAAoB;EAAAC,EAAA;EAAA,IAAnB;IAAEC;EAAW,CAAC,GAAAF,IAAA;EAC/B,MAAMG,OAAO,GAAIC,KAAK,IAAK;IACzB,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACD,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,KAAK,CAACG,CAAC,CAAC,EAAEH,KAAK,CAACC,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOD,KAAK;EACd,CAAC;EAED,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAChCS,OAAO,CAAC,CACN;IAAEU,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAM,CAAC,EACvB;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAO,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAQ,CAAC,EACzB;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAQ,CAAC,EACzB;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAM,CAAC,EACvB;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAS,CAAC,EAC1B;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAO,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAO,CAAC,EACxB;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAQ,CAAC,EACzB;IAAED,EAAE,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAO,CAAC,EACzB;IAAED,EAAE,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAQ,CAAC,EAC1B;IAAED,EAAE,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAS,CAAC,CAC5B,CAAC,CACH;EAED,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC2B,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAE7DC,SAAS,CAAC,MAAM;IACd,MAAM4B,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGV,eAAe;MAClC,IAAIS,GAAG,IAAIC,GAAG,EAAE;QACd,MAAMC,KAAK,GAAGf,KAAK,CAACgB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKW,GAAG,CAAC;QACnD,MAAMK,KAAK,GAAGlB,KAAK,CAACgB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKY,GAAG,CAAC;QACnD,IAAIC,KAAK,CAACZ,KAAK,KAAKe,KAAK,CAACf,KAAK,EAAE;UAC/BI,iBAAiB,CAAEY,kBAAkB,IAAK,CACxC,GAAGA,kBAAkB,EACrBN,GAAG,EACHC,GAAG,CACJ,CAAC;UACFL,QAAQ,CAAEW,SAAS,IAAKA,SAAS,GAAG,EAAE,CAAC;QACzC,CAAC,MACI;UACDX,QAAQ,CAAEW,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;QAC1C;QACAf,kBAAkB,CAAC,EAAE,CAAC;MACxB;IACF,CAAC;IACDO,aAAa,EAAE;IACf,IAAIN,cAAc,CAACX,MAAM,KAAKK,KAAK,CAACL,MAAM,EAAE;MACxCgB,kBAAkB,CAAC,IAAI,CAAC;MACxBpB,UAAU,CAACiB,KAAK,CAAC;IACrB;EAEF,CAAC,EAAE,CAACJ,eAAe,EAAEJ,KAAK,EAAEM,cAAc,EAAEE,KAAK,EAAEjB,UAAU,CAAE,CAAC;EAEhE,MAAM8B,eAAe,GAAInB,EAAE,IAAK;IAC9B,IAAII,cAAc,CAACgB,QAAQ,CAACpB,EAAE,CAAC,EAAE;MAC/B;IACF;IAEA,IAAIE,eAAe,CAACT,MAAM,KAAK,CAAC,EAAE;MAChC;IACF;IAEAU,kBAAkB,CAAEkB,mBAAmB,IAAK,CAAC,GAAGA,mBAAmB,EAAErB,EAAE,CAAC,CAAC;IACzE,IAAIE,eAAe,CAACT,MAAM,KAAK,CAAC,EAAE;MAC9B,MAAM,CAAC6B,MAAM,CAAC,GAAGpB,eAAe;MAChC,MAAMqB,QAAQ,GAAGzB,KAAK,CAACgB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKsB,MAAM,CAAC;MACzD,MAAME,WAAW,GAAG1B,KAAK,CAACgB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACf,EAAE,KAAKA,EAAE,CAAC;MAExD,IAAIuB,QAAQ,CAACtB,KAAK,KAAKuB,WAAW,CAACvB,KAAK,EAAE;QACxCI,iBAAiB,CAAEY,kBAAkB,IAAK,CACxC,GAAGA,kBAAkB,EACrBK,MAAM,EACNtB,EAAE,CACH,CAAC;MACJ;IACF;EACJ,CAAC;EAED,MAAMyB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B1B,QAAQ,CAAE2B,SAAS,IACjBA,SAAS,CAACC,GAAG,CAAEZ,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEa,OAAO,EAAE;IAAM,CAAC,CAAC,CAAC,CACvD;IACDzB,kBAAkB,CAAC,EAAE,CAAC;IACtBE,iBAAiB,CAAC,EAAE,CAAC;IACrBE,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;EAEH,MAAMsB,WAAW,GAAGA,CAAA,KAAM;IACtB9B,QAAQ,CAACT,OAAO,CAACQ,KAAK,CAAC,CAAC;IACxBK,kBAAkB,CAAC,EAAE,CAAC;IACtBE,iBAAiB,CAAC,EAAE,CAAC;IACrBE,QAAQ,CAAC,CAAC,CAAC;IACXE,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAEC,oBACExB,OAAA;IAAK6C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B9C,OAAA;MAAK6C,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9B9C,OAAA;QAAM6C,SAAS,EAAC,YAAY;QAAAC,QAAA,GAAC,SAAO,EAACzB,KAAK;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAQ;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC9C,eACNlD,OAAA;MAAK6C,SAAS,EAAC,YAAY;MAACM,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAO,CAAE;MAAAP,QAAA,EACxEvB,eAAe,gBACbvB,OAAA,CAACsD,QAAQ;QAACjC,KAAK,EAAEA,KAAM;QAACkC,OAAO,EAAEX;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,GAEjDrC,KAAK,CAAC6B,GAAG,CAACc,KAAA;QAAA,IAAC;UAAEzC,EAAE;UAAEC;QAAM,CAAC,GAAAwC,KAAA;QAAA,oBACtBxD,OAAA,CAACF,IAAI;UAEHiB,EAAE,EAAEA,EAAG;UACPC,KAAK,EAAEA,KAAM;UACb2B,OAAO,EAAExB,cAAc,CAACgB,QAAQ,CAACpB,EAAE,CAAE;UACrC0C,QAAQ,EAAExC,eAAe,CAACkB,QAAQ,CAACpB,EAAE,CAAE;UACvC2C,OAAO,EAAEA,CAAA,KAAMxB,eAAe,CAACnB,EAAE;QAAE,GAL9BA,EAAE;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAMP;MAAA,CACH;IACD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACI,eACNlD,OAAA;MACEmD,KAAK,EAAE;QACLC,OAAO,EAAE,MAAM;QACfO,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,SAAS,EAAE;MACb,CAAE;MAAAf,QAAA,eAEF9C,OAAA;QAAQ6C,SAAS,EAAC,gBAAgB;QAACa,OAAO,EAAElB,kBAAmB;QAAAM,QAAA,EAAC;MAEhE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV,CAAC;AAAC/C,EAAA,CAxIIF,SAAS;AAAA6D,EAAA,GAAT7D,SAAS;AA0If,eAAeA,SAAS;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}